{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/head.jpeg","path":"img/head.jpeg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1571416587982},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1571416588009},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1571416587994},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1571416588009},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1571416588009},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1571416587996},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1571416587996},{"_id":"themes/yilia/_config.yml","hash":"15039b83d87322077fb956bf1be8499cb855c93c","modified":1571480421096},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1571416587996},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1571416587994},{"_id":"source/_posts/Nginx-反向代理与负载均衡.md","hash":"7c1fdc2d288313e39db5c3105734986c4f0c0163","modified":1573020025842},{"_id":"source/_posts/RTCMultiConnection-API-Example.md","hash":"1c3a065205bab65e98ff2e42865f281ca612f304","modified":1571418188941},{"_id":"source/_posts/SSH-Port-Redirecting.md","hash":"a5b1cfb7baea3e3263e66834e3fb74cc0f1e372d","modified":1571457977840},{"_id":"source/_posts/SSH-secret-key-login.md","hash":"0320488c60972ebc8f61d4cc7d5bd0b01e6da95b","modified":1571457145754},{"_id":"source/_posts/SSR-VPN-Construction.md","hash":"3ecc50f714c99fdcb3c6ea34bb9d3f7b59c7bceb","modified":1571416807663},{"_id":"source/_posts/Vue-Element-学习-一.md","hash":"973af403e662ec8a94bb096e204936f7fbc503fc","modified":1571722083628},{"_id":"source/_posts/WebRTC-Signaling-Server-Deployment.md","hash":"456721b20349187df22e70636428edbf08be0523","modified":1571457155266},{"_id":"source/_posts/WebRTC-TURN-Server-Deployment.md","hash":"5364cd863341cb9ba891c8dcd4cd53fc64c95b38","modified":1571416808919},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1571416588009},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1571416588018},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1571416588022},{"_id":"themes/yilia/.git/index","hash":"38da6464dc413708f184d7009593218839fda96a","modified":1571416588028},{"_id":"themes/yilia/.git/packed-refs","hash":"76b1aa9479dd3de329935b6d94a6624c5f716d23","modified":1571416588028},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1571416587983},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1571416587982},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1571416587983},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1571416587983},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1571416587990},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1571416587982},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1571416587983},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1571416587995},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1571416587995},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1571416587996},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1571416587995},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1571416587996},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1571416587995},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1571416587995},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1571416587991},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1571416587992},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1571416588008},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1571416588008},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1571416587988},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1571416587992},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1571416587991},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1571416588024},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1571416588023},{"_id":"themes/yilia/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1571416588024},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1571416588025},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1571416588025},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1571416588023},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1571416588024},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1571416588023},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1571416588026},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1571416588025},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1571416588026},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1571416588018},{"_id":"themes/yilia/.git/logs/HEAD","hash":"3a71642f5803e6a6698103582b3ccbc3f17a38ee","modified":1571416588020},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1571416587989},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1571416587987},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1571416587987},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1571416587989},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1571416587988},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1571416587987},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1571416587989},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1571416587989},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1571416587987},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1571416587988},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1571416587988},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1571416587984},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1571416587984},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1571416587989},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1571416587987},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1571416587990},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1571416587994},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1571416587993},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1571416587993},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1571416587993},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1571416587992},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1571416587991},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1571416587991},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1571416587994},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1571416587993},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1571416588002},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1571416588002},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1571416588003},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1571416588003},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1571416588000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1571416587997},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1571416587999},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1571416588003},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1571416588002},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1571416587997},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1571416588005},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1571416588000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1571416587999},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1571416587998},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1571416588001},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1571416588001},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1571416588005},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1571416588002},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1571416587999},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1571416588005},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1571416588005},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1571416588003},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1571416588002},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1571416588005},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1571416587997},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1571416588001},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1571416588000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1571416588006},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1571416588007},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1571416588006},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1571416588008},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1571416588008},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1571416588007},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1571416588006},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1571416588007},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1571416588008},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1571416588007},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1571416588006},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1571416588007},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1571416587988},{"_id":"themes/yilia/source/img/alipay.jpg","hash":"b27bd47ea666303d8f300ae95e04f7de5782e67b","modified":1571417909793},{"_id":"themes/yilia/.git/objects/pack/pack-848ae1132244ad60cdaa82b959f49e9b689f46b2.idx","hash":"d0b9911ac7253987c01959f9ee70d6d9ada1aff6","modified":1571416588018},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1571416588027},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1571416587984},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1571416587984},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1571416587986},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1571416587986},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1571416587986},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1571416587985},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1571416587986},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1571416587985},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1571416587985},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1571416587985},{"_id":"themes/yilia/source/img/head.jpeg","hash":"f4179122502edc3c56b7ec86cb68de012532c532","modified":1571416927280},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1571416587999},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1571416587999},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1571416587998},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1571416587998},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1571416587998},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1571416588004},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1571416588004},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1571416588001},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1571416588001},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1571416588000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1571416588004},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1571416588004},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"3a71642f5803e6a6698103582b3ccbc3f17a38ee","modified":1571416588021},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1571416588027},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"3a71642f5803e6a6698103582b3ccbc3f17a38ee","modified":1571416588021},{"_id":"themes/yilia/.git/objects/pack/pack-848ae1132244ad60cdaa82b959f49e9b689f46b2.pack","hash":"d0b6b575205cd6ef91bb3565d436f1c4f2b39723","modified":1571416588017},{"_id":"public/content.json","hash":"16273261cc5b38a6f8991a14585430b029a23d0b","modified":1573020037494},{"_id":"public/2019/10/22/Vue-Element-学习-一/index.html","hash":"3a95e03dafcf76cb05a867cdf82d3aa8b04a87d2","modified":1603698118457},{"_id":"public/2019/10/18/RTCMultiConnection-API-Example/index.html","hash":"0dbd7a01423693e036b8db50cd835996f5e9a261","modified":1603698118457},{"_id":"public/2019/10/18/WebRTC-Signaling-Server-Deployment/index.html","hash":"3169ed9cb94012a3b92d58154018f8abe2cd9d60","modified":1603698118457},{"_id":"public/2019/10/18/SSH-secret-key-login/index.html","hash":"15274cb1be595fd85740a93729752e8b1b1f78a4","modified":1603698118457},{"_id":"public/2019/10/18/SSR-VPN-Construction/index.html","hash":"8d30b47f58e0db87a3cf2151229785fe0d1a905b","modified":1603698118457},{"_id":"public/2019/10/18/SSH-Port-Redirecting/index.html","hash":"81d437fc077abd32d53503da1c292df80a6b19a8","modified":1603698118457},{"_id":"public/2019/10/18/WebRTC-TURN-Server-Deployment/index.html","hash":"ca09128c33e72597817d7ed4cc3a2739232fdf71","modified":1603698118457},{"_id":"public/index.html","hash":"9b6887325329afb756acaa146147c3701bbfd524","modified":1603698118457},{"_id":"public/tags/RTCMultiConnection/index.html","hash":"20554000054816d28b3d7c214af04a0fd7501d16","modified":1603698118457},{"_id":"public/tags/VS-Code/index.html","hash":"c447fe8d6ca7945fdcb65ae87338e9184fa1b3d8","modified":1603698118457},{"_id":"public/tags/WebRTC/index.html","hash":"aa6d226ea0af61dfefba13ab3df49c216ef2c90f","modified":1603698118457},{"_id":"public/tags/SSH/index.html","hash":"b0f84d34a52cb79acf13977565468a506b7845d3","modified":1603698118457},{"_id":"public/tags/Signaling-Server/index.html","hash":"65d65be2a472cbf5ee679ec524a03e7159488a54","modified":1603698118457},{"_id":"public/tags/翻墙/index.html","hash":"a6a1e8e90c50ab635b007053c32aea59fd4f5a0a","modified":1603698118457},{"_id":"public/tags/SSR/index.html","hash":"7d184c0b60d77cdbf3a9a50cb99d713b0f11383c","modified":1603698118457},{"_id":"public/tags/Turnserver/index.html","hash":"313ef38363dc600d81a0dba914631da30a6959a1","modified":1603698118457},{"_id":"public/tags/Vue/index.html","hash":"4b392b0b883b43e1203c94e12513957ac3a97b2f","modified":1603698118457},{"_id":"public/tags/前端/index.html","hash":"89553dfe8515665dafb92b76ecb1f7590e2c4a6a","modified":1603698118457},{"_id":"public/tags/Vue-Element/index.html","hash":"8bfdca97b2f66ab7d6ff21f94651e7565d3aa8d5","modified":1603698118457},{"_id":"public/archives/index.html","hash":"5a6196c637e3a27614d1c8f2717c97a2e713bb28","modified":1603698118457},{"_id":"public/archives/2019/10/index.html","hash":"c818fc4978c4dad10845e960f1caca5e7ac8e265","modified":1603698118457},{"_id":"public/archives/2019/index.html","hash":"eb31ec746be91e3c07f59c5cfb17296397db6c96","modified":1603698118457},{"_id":"public/2019/11/06/Nginx-反向代理与负载均衡/index.html","hash":"2c3e7de9642e3a967c495cf6f4b83d69957f73b3","modified":1603698118457},{"_id":"public/tags/Web服务器/index.html","hash":"4602e591416696a1112983ed9e37f9ff71b099cb","modified":1603698118457},{"_id":"public/tags/反向代理/index.html","hash":"8568546410ea40e4eb7f7ae0976b4855fac24944","modified":1603698118457},{"_id":"public/tags/负载均衡/index.html","hash":"430bd2b0f250cabc42ee1c92871ceb4e20f8f702","modified":1603698118457},{"_id":"public/archives/2019/11/index.html","hash":"74ae9326bb77fe30a052c9e5c08e10256c212208","modified":1603698118457},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1573020037494},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1573020037494},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1573020037494},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1573020037494},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1573020037494},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1573020037494},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1573020037494},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1573020037494},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1573020037494},{"_id":"public/img/alipay.jpg","hash":"b27bd47ea666303d8f300ae95e04f7de5782e67b","modified":1573020037494},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1573020037494},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1573020037494},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1573020037494},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1573020037494},{"_id":"public/img/head.jpeg","hash":"f4179122502edc3c56b7ec86cb68de012532c532","modified":1573020037494}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Nginx 反向代理与负载均衡","date":"2019-11-06T05:47:01.000Z","_content":"# Nginx 服务器\nNginx服务器是一种高性能web服务器，一般用于生产环境中的使用，其类似的有nodeJS，Tomcat，Apache等web服务器。但Nginx的服务更加轻量级，且性能更好。\n\n## 反向代理\n反向代理就是代理另一个服务，即用户访问我们的网站，但实际提供的服务是属于别人或非本服务器端口提供的，我们的网站所提供的作用就是对这个服务的代理。这个代理服务一般也被部署到一个web服务器。\n\n### 负载均衡\n在高并发的情况下，单个端口提供的服务无法迅速地处理所有的请求，因此造成负载过大。负载均衡就是说我们可以将所有的请求分布到一系列服务中，这些服务进程有着不同的端口，可以使得单个端口服务的压力降低，从而达到负载均衡的效果。\n\n## 总结\n这大概就是今天的内容啦，具体的实现我下次会结合OpenResty再放出来，好了我得去接着搞托福了，我太难了T_T....","source":"_posts/Nginx-反向代理与负载均衡.md","raw":"---\ntitle: Nginx 反向代理与负载均衡\ndate: 2019-11-06 13:47:01\ntags:\n    - Web服务器\n    - 反向代理\n    - 负载均衡\n---\n# Nginx 服务器\nNginx服务器是一种高性能web服务器，一般用于生产环境中的使用，其类似的有nodeJS，Tomcat，Apache等web服务器。但Nginx的服务更加轻量级，且性能更好。\n\n## 反向代理\n反向代理就是代理另一个服务，即用户访问我们的网站，但实际提供的服务是属于别人或非本服务器端口提供的，我们的网站所提供的作用就是对这个服务的代理。这个代理服务一般也被部署到一个web服务器。\n\n### 负载均衡\n在高并发的情况下，单个端口提供的服务无法迅速地处理所有的请求，因此造成负载过大。负载均衡就是说我们可以将所有的请求分布到一系列服务中，这些服务进程有着不同的端口，可以使得单个端口服务的压力降低，从而达到负载均衡的效果。\n\n## 总结\n这大概就是今天的内容啦，具体的实现我下次会结合OpenResty再放出来，好了我得去接着搞托福了，我太难了T_T....","slug":"Nginx-反向代理与负载均衡","published":1,"updated":"2019-11-06T06:00:25.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2mvil560000437s3f2q8u8f","content":"<h1 id=\"Nginx-服务器\"><a href=\"#Nginx-服务器\" class=\"headerlink\" title=\"Nginx 服务器\"></a>Nginx 服务器</h1><p>Nginx服务器是一种高性能web服务器，一般用于生产环境中的使用，其类似的有nodeJS，Tomcat，Apache等web服务器。但Nginx的服务更加轻量级，且性能更好。</p>\n<h2 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h2><p>反向代理就是代理另一个服务，即用户访问我们的网站，但实际提供的服务是属于别人或非本服务器端口提供的，我们的网站所提供的作用就是对这个服务的代理。这个代理服务一般也被部署到一个web服务器。</p>\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><p>在高并发的情况下，单个端口提供的服务无法迅速地处理所有的请求，因此造成负载过大。负载均衡就是说我们可以将所有的请求分布到一系列服务中，这些服务进程有着不同的端口，可以使得单个端口服务的压力降低，从而达到负载均衡的效果。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这大概就是今天的内容啦，具体的实现我下次会结合OpenResty再放出来，好了我得去接着搞托福了，我太难了T_T….</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Nginx-服务器\"><a href=\"#Nginx-服务器\" class=\"headerlink\" title=\"Nginx 服务器\"></a>Nginx 服务器</h1><p>Nginx服务器是一种高性能web服务器，一般用于生产环境中的使用，其类似的有nodeJS，Tomcat，Apache等web服务器。但Nginx的服务更加轻量级，且性能更好。</p>\n<h2 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h2><p>反向代理就是代理另一个服务，即用户访问我们的网站，但实际提供的服务是属于别人或非本服务器端口提供的，我们的网站所提供的作用就是对这个服务的代理。这个代理服务一般也被部署到一个web服务器。</p>\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><p>在高并发的情况下，单个端口提供的服务无法迅速地处理所有的请求，因此造成负载过大。负载均衡就是说我们可以将所有的请求分布到一系列服务中，这些服务进程有着不同的端口，可以使得单个端口服务的压力降低，从而达到负载均衡的效果。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这大概就是今天的内容啦，具体的实现我下次会结合OpenResty再放出来，好了我得去接着搞托福了，我太难了T_T….</p>\n"},{"title":"RTCMultiConnection API & Example","date":"2019-10-18T09:27:29.000Z","_content":"\n\n# RTCMultiConnection\nRTCMultiConnection 是一个对WebRTC进行高级封装后的js库。其内置了房间服务器，信令服务器。因此在构建多对多的PeerConnection 时较为方面，另外也引入了Peer中继机制来降低带宽损耗（该方法存在一定问题，会在本文最后描述）。So，show you the code.\n\n## 创建连接\n```js\nvar connection = new RTCMultiConnection();\nvar userid = \"123\"\nif(userid != null){\n    connection.userid = userid;\n}\n//这里可以对userid进行设置，其他的属性也可以以类似的方式进行赋值\n\nconnection.autoCloseEntireSession = false;\n// autoCloseEntireSession 属性设为ture时，开启房间Peer在退出房间后会关闭整个房间，一般不建议设置为true，除非会议主持者确定会最后退出。\n\n// 信令服务器地址\nconnection.socketURL = signalingServerAddress;\n// 设置穿透服务器和TURN服务器地址\nconnection.iceServers = [];\nconnection.iceServers.push({\n    urls: 'stun:' + relayServerAddress\n});\nconnection.iceServers.push({\n    urls: 'turn:' + relayServerAddress,\n    credential: turnCredential,\n    username: turnUsername\n});\n```\n\n## PS：这里是一个低版本兼容，FireFox， 关于屏幕视频流获取方式存在几种方式\n1. Firefox66 或 Chrome70以上 支持API getDisplayMedia()\n2. Firefox33-66 可以通过getUserMedia()添加特殊的videoConstraint 进行获取\n3. 低版本Chrome 通过插件进行获取，调用插件进行屏幕视频流获取‘\n```js\n// 用于兼容低版本Firefox视频共享\nfunction getScreenStream(callback) {\n    if (navigator.getDisplayMedia) {\n        navigator.getDisplayMedia({\n            video: true\n        }).then(screenStream => {\n            callback(screenStream);\n        });\n    } else if (navigator.mediaDevices.getDisplayMedia) {\n        navigator.mediaDevices.getDisplayMedia({\n            video: true\n        }).then(screenStream => {\n            callback(screenStream);\n        });\n    } else {\n        getScreenId(function(error, sourceId, screen_constraints) {\n            navigator.mediaDevices.getUserMedia(screen_constraints).then(function(screenStream) {\n                callback(screenStream);\n            });\n        });\n    }\n}\n```\n","source":"_posts/RTCMultiConnection-API-Example.md","raw":"---\ntitle: RTCMultiConnection API & Example\ndate: 2019-10-18 17:27:29\ntags:\n    - WebRTC\n    - RTCMultiConnection\n---\n\n\n# RTCMultiConnection\nRTCMultiConnection 是一个对WebRTC进行高级封装后的js库。其内置了房间服务器，信令服务器。因此在构建多对多的PeerConnection 时较为方面，另外也引入了Peer中继机制来降低带宽损耗（该方法存在一定问题，会在本文最后描述）。So，show you the code.\n\n## 创建连接\n```js\nvar connection = new RTCMultiConnection();\nvar userid = \"123\"\nif(userid != null){\n    connection.userid = userid;\n}\n//这里可以对userid进行设置，其他的属性也可以以类似的方式进行赋值\n\nconnection.autoCloseEntireSession = false;\n// autoCloseEntireSession 属性设为ture时，开启房间Peer在退出房间后会关闭整个房间，一般不建议设置为true，除非会议主持者确定会最后退出。\n\n// 信令服务器地址\nconnection.socketURL = signalingServerAddress;\n// 设置穿透服务器和TURN服务器地址\nconnection.iceServers = [];\nconnection.iceServers.push({\n    urls: 'stun:' + relayServerAddress\n});\nconnection.iceServers.push({\n    urls: 'turn:' + relayServerAddress,\n    credential: turnCredential,\n    username: turnUsername\n});\n```\n\n## PS：这里是一个低版本兼容，FireFox， 关于屏幕视频流获取方式存在几种方式\n1. Firefox66 或 Chrome70以上 支持API getDisplayMedia()\n2. Firefox33-66 可以通过getUserMedia()添加特殊的videoConstraint 进行获取\n3. 低版本Chrome 通过插件进行获取，调用插件进行屏幕视频流获取‘\n```js\n// 用于兼容低版本Firefox视频共享\nfunction getScreenStream(callback) {\n    if (navigator.getDisplayMedia) {\n        navigator.getDisplayMedia({\n            video: true\n        }).then(screenStream => {\n            callback(screenStream);\n        });\n    } else if (navigator.mediaDevices.getDisplayMedia) {\n        navigator.mediaDevices.getDisplayMedia({\n            video: true\n        }).then(screenStream => {\n            callback(screenStream);\n        });\n    } else {\n        getScreenId(function(error, sourceId, screen_constraints) {\n            navigator.mediaDevices.getUserMedia(screen_constraints).then(function(screenStream) {\n                callback(screenStream);\n            });\n        });\n    }\n}\n```\n","slug":"RTCMultiConnection-API-Example","published":1,"updated":"2019-10-18T17:03:08.941Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2mvil5a0001437s8vx87u35","content":"<h1 id=\"RTCMultiConnection\"><a href=\"#RTCMultiConnection\" class=\"headerlink\" title=\"RTCMultiConnection\"></a>RTCMultiConnection</h1><p>RTCMultiConnection 是一个对WebRTC进行高级封装后的js库。其内置了房间服务器，信令服务器。因此在构建多对多的PeerConnection 时较为方面，另外也引入了Peer中继机制来降低带宽损耗（该方法存在一定问题，会在本文最后描述）。So，show you the code.</p>\n<h2 id=\"创建连接\"><a href=\"#创建连接\" class=\"headerlink\" title=\"创建连接\"></a>创建连接</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> connection = <span class=\"keyword\">new</span> RTCMultiConnection();</span><br><span class=\"line\"><span class=\"keyword\">var</span> userid = <span class=\"string\">\"123\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(userid != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">    connection.userid = userid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这里可以对userid进行设置，其他的属性也可以以类似的方式进行赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\">connection.autoCloseEntireSession = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">// autoCloseEntireSession 属性设为ture时，开启房间Peer在退出房间后会关闭整个房间，一般不建议设置为true，除非会议主持者确定会最后退出。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 信令服务器地址</span></span><br><span class=\"line\">connection.socketURL = signalingServerAddress;</span><br><span class=\"line\"><span class=\"comment\">// 设置穿透服务器和TURN服务器地址</span></span><br><span class=\"line\">connection.iceServers = [];</span><br><span class=\"line\">connection.iceServers.push(&#123;</span><br><span class=\"line\">    urls: <span class=\"string\">'stun:'</span> + relayServerAddress</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">connection.iceServers.push(&#123;</span><br><span class=\"line\">    urls: <span class=\"string\">'turn:'</span> + relayServerAddress,</span><br><span class=\"line\">    credential: turnCredential,</span><br><span class=\"line\">    username: turnUsername</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PS：这里是一个低版本兼容，FireFox，-关于屏幕视频流获取方式存在几种方式\"><a href=\"#PS：这里是一个低版本兼容，FireFox，-关于屏幕视频流获取方式存在几种方式\" class=\"headerlink\" title=\"PS：这里是一个低版本兼容，FireFox， 关于屏幕视频流获取方式存在几种方式\"></a>PS：这里是一个低版本兼容，FireFox， 关于屏幕视频流获取方式存在几种方式</h2><ol>\n<li>Firefox66 或 Chrome70以上 支持API getDisplayMedia()</li>\n<li>Firefox33-66 可以通过getUserMedia()添加特殊的videoConstraint 进行获取</li>\n<li>低版本Chrome 通过插件进行获取，调用插件进行屏幕视频流获取‘<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用于兼容低版本Firefox视频共享</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getScreenStream</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (navigator.getDisplayMedia) &#123;</span><br><span class=\"line\">        navigator.getDisplayMedia(&#123;</span><br><span class=\"line\">            video: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;).then(<span class=\"function\"><span class=\"params\">screenStream</span> =&gt;</span> &#123;</span><br><span class=\"line\">            callback(screenStream);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (navigator.mediaDevices.getDisplayMedia) &#123;</span><br><span class=\"line\">        navigator.mediaDevices.getDisplayMedia(&#123;</span><br><span class=\"line\">            video: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;).then(<span class=\"function\"><span class=\"params\">screenStream</span> =&gt;</span> &#123;</span><br><span class=\"line\">            callback(screenStream);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        getScreenId(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, sourceId, screen_constraints</span>) </span>&#123;</span><br><span class=\"line\">            navigator.mediaDevices.getUserMedia(screen_constraints).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">screenStream</span>) </span>&#123;</span><br><span class=\"line\">                callback(screenStream);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"RTCMultiConnection\"><a href=\"#RTCMultiConnection\" class=\"headerlink\" title=\"RTCMultiConnection\"></a>RTCMultiConnection</h1><p>RTCMultiConnection 是一个对WebRTC进行高级封装后的js库。其内置了房间服务器，信令服务器。因此在构建多对多的PeerConnection 时较为方面，另外也引入了Peer中继机制来降低带宽损耗（该方法存在一定问题，会在本文最后描述）。So，show you the code.</p>\n<h2 id=\"创建连接\"><a href=\"#创建连接\" class=\"headerlink\" title=\"创建连接\"></a>创建连接</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> connection = <span class=\"keyword\">new</span> RTCMultiConnection();</span><br><span class=\"line\"><span class=\"keyword\">var</span> userid = <span class=\"string\">\"123\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(userid != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">    connection.userid = userid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这里可以对userid进行设置，其他的属性也可以以类似的方式进行赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\">connection.autoCloseEntireSession = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">// autoCloseEntireSession 属性设为ture时，开启房间Peer在退出房间后会关闭整个房间，一般不建议设置为true，除非会议主持者确定会最后退出。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 信令服务器地址</span></span><br><span class=\"line\">connection.socketURL = signalingServerAddress;</span><br><span class=\"line\"><span class=\"comment\">// 设置穿透服务器和TURN服务器地址</span></span><br><span class=\"line\">connection.iceServers = [];</span><br><span class=\"line\">connection.iceServers.push(&#123;</span><br><span class=\"line\">    urls: <span class=\"string\">'stun:'</span> + relayServerAddress</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">connection.iceServers.push(&#123;</span><br><span class=\"line\">    urls: <span class=\"string\">'turn:'</span> + relayServerAddress,</span><br><span class=\"line\">    credential: turnCredential,</span><br><span class=\"line\">    username: turnUsername</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PS：这里是一个低版本兼容，FireFox，-关于屏幕视频流获取方式存在几种方式\"><a href=\"#PS：这里是一个低版本兼容，FireFox，-关于屏幕视频流获取方式存在几种方式\" class=\"headerlink\" title=\"PS：这里是一个低版本兼容，FireFox， 关于屏幕视频流获取方式存在几种方式\"></a>PS：这里是一个低版本兼容，FireFox， 关于屏幕视频流获取方式存在几种方式</h2><ol>\n<li>Firefox66 或 Chrome70以上 支持API getDisplayMedia()</li>\n<li>Firefox33-66 可以通过getUserMedia()添加特殊的videoConstraint 进行获取</li>\n<li>低版本Chrome 通过插件进行获取，调用插件进行屏幕视频流获取‘<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用于兼容低版本Firefox视频共享</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getScreenStream</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (navigator.getDisplayMedia) &#123;</span><br><span class=\"line\">        navigator.getDisplayMedia(&#123;</span><br><span class=\"line\">            video: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;).then(<span class=\"function\"><span class=\"params\">screenStream</span> =&gt;</span> &#123;</span><br><span class=\"line\">            callback(screenStream);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (navigator.mediaDevices.getDisplayMedia) &#123;</span><br><span class=\"line\">        navigator.mediaDevices.getDisplayMedia(&#123;</span><br><span class=\"line\">            video: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;).then(<span class=\"function\"><span class=\"params\">screenStream</span> =&gt;</span> &#123;</span><br><span class=\"line\">            callback(screenStream);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        getScreenId(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, sourceId, screen_constraints</span>) </span>&#123;</span><br><span class=\"line\">            navigator.mediaDevices.getUserMedia(screen_constraints).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">screenStream</span>) </span>&#123;</span><br><span class=\"line\">                callback(screenStream);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"SSH Port Redirecting","date":"2019-10-18T03:23:49.000Z","_content":"# SSH Port Redirecting LAN Penetrating\n内网穿透一般用于ssh连接到一台内网服务器，使用反向端口转发可以避免在内网服务器IP变更时需要重新设置的问题。由于需要一个公网IP来对其唯一标识，故需要额外的一台公网服务器。公网服务器需要对sshd服务进行设置。\n\n```bash\ncd /etc/ssh/\nvim sshd_config\n```\n将以下内容添加到配置文件中\n```bash\nGatewayPorts yes\n```\n并重启sshd服务\n```bash\nservice sshd restart\n```\n在内网服务器中，需要启动autossh来保证穿透隧道连接的稳定性，并将其ssh公钥添加到公网服务器中\n```bash\nssh-copy-id root@47.XXX.90.218\napt-get install autossh\nautossh -M 20002 -NfR 0.0.0.0:20001:localhost:22 root@47.XXX.90.218\n```\n端口需要为空闲端口，不能被占用。现在即可使用公网服务器来进行ssh连接。\n在VS Code中，其配置如下：\n```text\nHost VPN\n    HostName 47.XXX.90.218\n    User root\n    Port 22001\n```","source":"_posts/SSH-Port-Redirecting.md","raw":"---\ntitle: SSH Port Redirecting\ndate: 2019-10-18 11:23:49\ntags: \n    - SSH\n    - VS Code\n---\n# SSH Port Redirecting LAN Penetrating\n内网穿透一般用于ssh连接到一台内网服务器，使用反向端口转发可以避免在内网服务器IP变更时需要重新设置的问题。由于需要一个公网IP来对其唯一标识，故需要额外的一台公网服务器。公网服务器需要对sshd服务进行设置。\n\n```bash\ncd /etc/ssh/\nvim sshd_config\n```\n将以下内容添加到配置文件中\n```bash\nGatewayPorts yes\n```\n并重启sshd服务\n```bash\nservice sshd restart\n```\n在内网服务器中，需要启动autossh来保证穿透隧道连接的稳定性，并将其ssh公钥添加到公网服务器中\n```bash\nssh-copy-id root@47.XXX.90.218\napt-get install autossh\nautossh -M 20002 -NfR 0.0.0.0:20001:localhost:22 root@47.XXX.90.218\n```\n端口需要为空闲端口，不能被占用。现在即可使用公网服务器来进行ssh连接。\n在VS Code中，其配置如下：\n```text\nHost VPN\n    HostName 47.XXX.90.218\n    User root\n    Port 22001\n```","slug":"SSH-Port-Redirecting","published":1,"updated":"2019-10-19T04:06:17.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2mvil5d0003437s361793lw","content":"<h1 id=\"SSH-Port-Redirecting-LAN-Penetrating\"><a href=\"#SSH-Port-Redirecting-LAN-Penetrating\" class=\"headerlink\" title=\"SSH Port Redirecting LAN Penetrating\"></a>SSH Port Redirecting LAN Penetrating</h1><p>内网穿透一般用于ssh连接到一台内网服务器，使用反向端口转发可以避免在内网服务器IP变更时需要重新设置的问题。由于需要一个公网IP来对其唯一标识，故需要额外的一台公网服务器。公网服务器需要对sshd服务进行设置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/ssh/</span><br><span class=\"line\">vim sshd_config</span><br></pre></td></tr></table></figure>\n<p>将以下内容添加到配置文件中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GatewayPorts yes</span><br></pre></td></tr></table></figure>\n<p>并重启sshd服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service sshd restart</span><br></pre></td></tr></table></figure>\n<p>在内网服务器中，需要启动autossh来保证穿透隧道连接的稳定性，并将其ssh公钥添加到公网服务器中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id root@47.XXX.90.218</span><br><span class=\"line\">apt-get install autossh</span><br><span class=\"line\">autossh -M 20002 -NfR 0.0.0.0:20001:localhost:22 root@47.XXX.90.218</span><br></pre></td></tr></table></figure>\n<p>端口需要为空闲端口，不能被占用。现在即可使用公网服务器来进行ssh连接。<br>在VS Code中，其配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host VPN</span><br><span class=\"line\">    HostName 47.XXX.90.218</span><br><span class=\"line\">    User root</span><br><span class=\"line\">    Port 22001</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SSH-Port-Redirecting-LAN-Penetrating\"><a href=\"#SSH-Port-Redirecting-LAN-Penetrating\" class=\"headerlink\" title=\"SSH Port Redirecting LAN Penetrating\"></a>SSH Port Redirecting LAN Penetrating</h1><p>内网穿透一般用于ssh连接到一台内网服务器，使用反向端口转发可以避免在内网服务器IP变更时需要重新设置的问题。由于需要一个公网IP来对其唯一标识，故需要额外的一台公网服务器。公网服务器需要对sshd服务进行设置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/ssh/</span><br><span class=\"line\">vim sshd_config</span><br></pre></td></tr></table></figure>\n<p>将以下内容添加到配置文件中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GatewayPorts yes</span><br></pre></td></tr></table></figure>\n<p>并重启sshd服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service sshd restart</span><br></pre></td></tr></table></figure>\n<p>在内网服务器中，需要启动autossh来保证穿透隧道连接的稳定性，并将其ssh公钥添加到公网服务器中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id root@47.XXX.90.218</span><br><span class=\"line\">apt-get install autossh</span><br><span class=\"line\">autossh -M 20002 -NfR 0.0.0.0:20001:localhost:22 root@47.XXX.90.218</span><br></pre></td></tr></table></figure>\n<p>端口需要为空闲端口，不能被占用。现在即可使用公网服务器来进行ssh连接。<br>在VS Code中，其配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host VPN</span><br><span class=\"line\">    HostName 47.XXX.90.218</span><br><span class=\"line\">    User root</span><br><span class=\"line\">    Port 22001</span><br></pre></td></tr></table></figure>"},{"title":"SSH secret key login","date":"2019-10-18T03:25:18.000Z","_content":"## SSH免密登陆\n### 生成ssh密钥\n```bash\nssh-keygen -t rsa -f local_rsa\n-t 指定密钥类型，默认是 rsa ，可以省略。\n-C 设置注释文字，比如邮箱，可以省略。\n-f 指定密钥文件存储文件名，可以省略。默认id_rsa\n```\n一路回车会发现在~/.ssh目录下生成了local_rsa.pub和local_rsa。\n\n### Linux环境下向远程服务器添加本机公钥\n```zsh\nssh-copy-id remoteUser@remoteIp\n```\n输入对应密码即可直接登陆\n\n### Windows环境下/无ssh-copy-id 向远程服务器添加本机公钥\n```bash\nscp path/to/local_rsa.pub remoteUser@remoteIp:~/.ssh\n```\n再通过ssh连接到远程服务器，进入~/.ssh目录\n```bash\ncat local_rsa.pub > authorized_keys\n```\n之后便可直接进行登陆","source":"_posts/SSH-secret-key-login.md","raw":"---\ntitle: SSH secret key login\ndate: 2019-10-18 11:25:18\ntags: \n    - SSH\n    - VS Code\n---\n## SSH免密登陆\n### 生成ssh密钥\n```bash\nssh-keygen -t rsa -f local_rsa\n-t 指定密钥类型，默认是 rsa ，可以省略。\n-C 设置注释文字，比如邮箱，可以省略。\n-f 指定密钥文件存储文件名，可以省略。默认id_rsa\n```\n一路回车会发现在~/.ssh目录下生成了local_rsa.pub和local_rsa。\n\n### Linux环境下向远程服务器添加本机公钥\n```zsh\nssh-copy-id remoteUser@remoteIp\n```\n输入对应密码即可直接登陆\n\n### Windows环境下/无ssh-copy-id 向远程服务器添加本机公钥\n```bash\nscp path/to/local_rsa.pub remoteUser@remoteIp:~/.ssh\n```\n再通过ssh连接到远程服务器，进入~/.ssh目录\n```bash\ncat local_rsa.pub > authorized_keys\n```\n之后便可直接进行登陆","slug":"SSH-secret-key-login","published":1,"updated":"2019-10-19T03:52:25.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2mvil5e0004437s187sa5t8","content":"<h2 id=\"SSH免密登陆\"><a href=\"#SSH免密登陆\" class=\"headerlink\" title=\"SSH免密登陆\"></a>SSH免密登陆</h2><h3 id=\"生成ssh密钥\"><a href=\"#生成ssh密钥\" class=\"headerlink\" title=\"生成ssh密钥\"></a>生成ssh密钥</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -f local_rsa</span><br><span class=\"line\">-t 指定密钥类型，默认是 rsa ，可以省略。</span><br><span class=\"line\">-C 设置注释文字，比如邮箱，可以省略。</span><br><span class=\"line\">-f 指定密钥文件存储文件名，可以省略。默认id_rsa</span><br></pre></td></tr></table></figure>\n<p>一路回车会发现在~/.ssh目录下生成了local_rsa.pub和local_rsa。</p>\n<h3 id=\"Linux环境下向远程服务器添加本机公钥\"><a href=\"#Linux环境下向远程服务器添加本机公钥\" class=\"headerlink\" title=\"Linux环境下向远程服务器添加本机公钥\"></a>Linux环境下向远程服务器添加本机公钥</h3><figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id remoteUser@remoteIp</span><br></pre></td></tr></table></figure>\n<p>输入对应密码即可直接登陆</p>\n<h3 id=\"Windows环境下-无ssh-copy-id-向远程服务器添加本机公钥\"><a href=\"#Windows环境下-无ssh-copy-id-向远程服务器添加本机公钥\" class=\"headerlink\" title=\"Windows环境下/无ssh-copy-id 向远程服务器添加本机公钥\"></a>Windows环境下/无ssh-copy-id 向远程服务器添加本机公钥</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp path/to/local_rsa.pub remoteUser@remoteIp:~/.ssh</span><br></pre></td></tr></table></figure>\n<p>再通过ssh连接到远程服务器，进入~/.ssh目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat local_rsa.pub &gt; authorized_keys</span><br></pre></td></tr></table></figure>\n<p>之后便可直接进行登陆</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SSH免密登陆\"><a href=\"#SSH免密登陆\" class=\"headerlink\" title=\"SSH免密登陆\"></a>SSH免密登陆</h2><h3 id=\"生成ssh密钥\"><a href=\"#生成ssh密钥\" class=\"headerlink\" title=\"生成ssh密钥\"></a>生成ssh密钥</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -f local_rsa</span><br><span class=\"line\">-t 指定密钥类型，默认是 rsa ，可以省略。</span><br><span class=\"line\">-C 设置注释文字，比如邮箱，可以省略。</span><br><span class=\"line\">-f 指定密钥文件存储文件名，可以省略。默认id_rsa</span><br></pre></td></tr></table></figure>\n<p>一路回车会发现在~/.ssh目录下生成了local_rsa.pub和local_rsa。</p>\n<h3 id=\"Linux环境下向远程服务器添加本机公钥\"><a href=\"#Linux环境下向远程服务器添加本机公钥\" class=\"headerlink\" title=\"Linux环境下向远程服务器添加本机公钥\"></a>Linux环境下向远程服务器添加本机公钥</h3><figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id remoteUser@remoteIp</span><br></pre></td></tr></table></figure>\n<p>输入对应密码即可直接登陆</p>\n<h3 id=\"Windows环境下-无ssh-copy-id-向远程服务器添加本机公钥\"><a href=\"#Windows环境下-无ssh-copy-id-向远程服务器添加本机公钥\" class=\"headerlink\" title=\"Windows环境下/无ssh-copy-id 向远程服务器添加本机公钥\"></a>Windows环境下/无ssh-copy-id 向远程服务器添加本机公钥</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp path/to/local_rsa.pub remoteUser@remoteIp:~/.ssh</span><br></pre></td></tr></table></figure>\n<p>再通过ssh连接到远程服务器，进入~/.ssh目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat local_rsa.pub &gt; authorized_keys</span><br></pre></td></tr></table></figure>\n<p>之后便可直接进行登陆</p>\n"},{"title":"WebRTC Signaling Server Deployment","date":"2019-10-18T05:17:38.000Z","_content":"\n# Signaling Server Deployment\n信令服务器作为Peer连接的信号交互服务终端，需要保证所有的Peer都能与其建立稳定的连接。因此一般部署在公网或局域网的顶层。\n### Https 设置\n由于WebRTC API getUserMedia()需要在建立安全连接时才能被调用，因此需要使用Https服务来承载服务页面。这里需要注意的是如果浏览器设置中允许混合内容时其实不需要设置信令的Https服务，但为了安全起见建议设置Https信令服务。其步骤可以概括为以下两部分。\n#### 生成证书\n```bash\nopenssl genrsa -des3 -out server.key 2048\nopenssl rsa -in server.key -out server.key\nopenssl req -new -x509 -key server.key -out ca.crt -days 36500\nopenssl req -new -key server.key -out server.csr\nopenssl x509 -req -days 36500 -in server.csr -CA ca.crt -CAkey server.key -CAcreateserial -out server.crt\n```\n#### 修改信令服务器配置文件\n```bash\ncd node_modules/rtcmulticonnection-server\nvim config.json\n```\n编辑以下文件，其中isUserHTTPs 设置为true代表启动Https服务。sslKey和sslCert代表生成的证书和密钥的路径。\n```json\n{\n  \"socketURL\": \"/\",\n  \"dirPath\": \"\",\n  \"homePage\": \"/demos/index.html\",\n  \"socketMessageEvent\": \"RTCMultiConnection-Message\",\n  \"socketCustomEvent\": \"RTCMultiConnection-Custom-Message\",\n  \"port\": \"9001\",\n  \"enableLogs\": \"false\",\n  \"autoRebootServerOnFailure\": \"false\",\n  \"isUseHTTPs\": \"true\",\n  \"sslKey\": \"./fake-keys/server.key\",\n  \"sslCert\": \"./fake-keys/server.crt\",\n  \"sslCabundle\": \"\",\n  \"enableAdmin\": \"false\",\n  \"adminUserName\": \"username\",\n  \"adminPassword\": \"password\"\n}\n```\n### 启动Signaling Server\n```bash\ncd node_modules/rtcmulticonnection-server\nnode server.js\n```\n","source":"_posts/WebRTC-Signaling-Server-Deployment.md","raw":"---\ntitle: WebRTC Signaling Server Deployment\ndate: 2019-10-18 13:17:38\ntags:\n    - WebRTC\n    - Signaling Server\n---\n\n# Signaling Server Deployment\n信令服务器作为Peer连接的信号交互服务终端，需要保证所有的Peer都能与其建立稳定的连接。因此一般部署在公网或局域网的顶层。\n### Https 设置\n由于WebRTC API getUserMedia()需要在建立安全连接时才能被调用，因此需要使用Https服务来承载服务页面。这里需要注意的是如果浏览器设置中允许混合内容时其实不需要设置信令的Https服务，但为了安全起见建议设置Https信令服务。其步骤可以概括为以下两部分。\n#### 生成证书\n```bash\nopenssl genrsa -des3 -out server.key 2048\nopenssl rsa -in server.key -out server.key\nopenssl req -new -x509 -key server.key -out ca.crt -days 36500\nopenssl req -new -key server.key -out server.csr\nopenssl x509 -req -days 36500 -in server.csr -CA ca.crt -CAkey server.key -CAcreateserial -out server.crt\n```\n#### 修改信令服务器配置文件\n```bash\ncd node_modules/rtcmulticonnection-server\nvim config.json\n```\n编辑以下文件，其中isUserHTTPs 设置为true代表启动Https服务。sslKey和sslCert代表生成的证书和密钥的路径。\n```json\n{\n  \"socketURL\": \"/\",\n  \"dirPath\": \"\",\n  \"homePage\": \"/demos/index.html\",\n  \"socketMessageEvent\": \"RTCMultiConnection-Message\",\n  \"socketCustomEvent\": \"RTCMultiConnection-Custom-Message\",\n  \"port\": \"9001\",\n  \"enableLogs\": \"false\",\n  \"autoRebootServerOnFailure\": \"false\",\n  \"isUseHTTPs\": \"true\",\n  \"sslKey\": \"./fake-keys/server.key\",\n  \"sslCert\": \"./fake-keys/server.crt\",\n  \"sslCabundle\": \"\",\n  \"enableAdmin\": \"false\",\n  \"adminUserName\": \"username\",\n  \"adminPassword\": \"password\"\n}\n```\n### 启动Signaling Server\n```bash\ncd node_modules/rtcmulticonnection-server\nnode server.js\n```\n","slug":"WebRTC-Signaling-Server-Deployment","published":1,"updated":"2019-10-19T03:52:35.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2mvil5f0005437sgh7x2rvo","content":"<h1 id=\"Signaling-Server-Deployment\"><a href=\"#Signaling-Server-Deployment\" class=\"headerlink\" title=\"Signaling Server Deployment\"></a>Signaling Server Deployment</h1><p>信令服务器作为Peer连接的信号交互服务终端，需要保证所有的Peer都能与其建立稳定的连接。因此一般部署在公网或局域网的顶层。</p>\n<h3 id=\"Https-设置\"><a href=\"#Https-设置\" class=\"headerlink\" title=\"Https 设置\"></a>Https 设置</h3><p>由于WebRTC API getUserMedia()需要在建立安全连接时才能被调用，因此需要使用Https服务来承载服务页面。这里需要注意的是如果浏览器设置中允许混合内容时其实不需要设置信令的Https服务，但为了安全起见建议设置Https信令服务。其步骤可以概括为以下两部分。</p>\n<h4 id=\"生成证书\"><a href=\"#生成证书\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -des3 -out server.key 2048</span><br><span class=\"line\">openssl rsa -<span class=\"keyword\">in</span> server.key -out server.key</span><br><span class=\"line\">openssl req -new -x509 -key server.key -out ca.crt -days 36500</span><br><span class=\"line\">openssl req -new -key server.key -out server.csr</span><br><span class=\"line\">openssl x509 -req -days 36500 -<span class=\"keyword\">in</span> server.csr -CA ca.crt -CAkey server.key -CAcreateserial -out server.crt</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改信令服务器配置文件\"><a href=\"#修改信令服务器配置文件\" class=\"headerlink\" title=\"修改信令服务器配置文件\"></a>修改信令服务器配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> node_modules/rtcmulticonnection-server</span><br><span class=\"line\">vim config.json</span><br></pre></td></tr></table></figure>\n<p>编辑以下文件，其中isUserHTTPs 设置为true代表启动Https服务。sslKey和sslCert代表生成的证书和密钥的路径。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"socketURL\"</span>: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"dirPath\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"homePage\"</span>: <span class=\"string\">\"/demos/index.html\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"socketMessageEvent\"</span>: <span class=\"string\">\"RTCMultiConnection-Message\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"socketCustomEvent\"</span>: <span class=\"string\">\"RTCMultiConnection-Custom-Message\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"port\"</span>: <span class=\"string\">\"9001\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"enableLogs\"</span>: <span class=\"string\">\"false\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"autoRebootServerOnFailure\"</span>: <span class=\"string\">\"false\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"isUseHTTPs\"</span>: <span class=\"string\">\"true\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"sslKey\"</span>: <span class=\"string\">\"./fake-keys/server.key\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"sslCert\"</span>: <span class=\"string\">\"./fake-keys/server.crt\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"sslCabundle\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"enableAdmin\"</span>: <span class=\"string\">\"false\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"adminUserName\"</span>: <span class=\"string\">\"username\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"adminPassword\"</span>: <span class=\"string\">\"password\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动Signaling-Server\"><a href=\"#启动Signaling-Server\" class=\"headerlink\" title=\"启动Signaling Server\"></a>启动Signaling Server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> node_modules/rtcmulticonnection-server</span><br><span class=\"line\">node server.js</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Signaling-Server-Deployment\"><a href=\"#Signaling-Server-Deployment\" class=\"headerlink\" title=\"Signaling Server Deployment\"></a>Signaling Server Deployment</h1><p>信令服务器作为Peer连接的信号交互服务终端，需要保证所有的Peer都能与其建立稳定的连接。因此一般部署在公网或局域网的顶层。</p>\n<h3 id=\"Https-设置\"><a href=\"#Https-设置\" class=\"headerlink\" title=\"Https 设置\"></a>Https 设置</h3><p>由于WebRTC API getUserMedia()需要在建立安全连接时才能被调用，因此需要使用Https服务来承载服务页面。这里需要注意的是如果浏览器设置中允许混合内容时其实不需要设置信令的Https服务，但为了安全起见建议设置Https信令服务。其步骤可以概括为以下两部分。</p>\n<h4 id=\"生成证书\"><a href=\"#生成证书\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -des3 -out server.key 2048</span><br><span class=\"line\">openssl rsa -<span class=\"keyword\">in</span> server.key -out server.key</span><br><span class=\"line\">openssl req -new -x509 -key server.key -out ca.crt -days 36500</span><br><span class=\"line\">openssl req -new -key server.key -out server.csr</span><br><span class=\"line\">openssl x509 -req -days 36500 -<span class=\"keyword\">in</span> server.csr -CA ca.crt -CAkey server.key -CAcreateserial -out server.crt</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改信令服务器配置文件\"><a href=\"#修改信令服务器配置文件\" class=\"headerlink\" title=\"修改信令服务器配置文件\"></a>修改信令服务器配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> node_modules/rtcmulticonnection-server</span><br><span class=\"line\">vim config.json</span><br></pre></td></tr></table></figure>\n<p>编辑以下文件，其中isUserHTTPs 设置为true代表启动Https服务。sslKey和sslCert代表生成的证书和密钥的路径。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"socketURL\"</span>: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"dirPath\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"homePage\"</span>: <span class=\"string\">\"/demos/index.html\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"socketMessageEvent\"</span>: <span class=\"string\">\"RTCMultiConnection-Message\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"socketCustomEvent\"</span>: <span class=\"string\">\"RTCMultiConnection-Custom-Message\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"port\"</span>: <span class=\"string\">\"9001\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"enableLogs\"</span>: <span class=\"string\">\"false\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"autoRebootServerOnFailure\"</span>: <span class=\"string\">\"false\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"isUseHTTPs\"</span>: <span class=\"string\">\"true\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"sslKey\"</span>: <span class=\"string\">\"./fake-keys/server.key\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"sslCert\"</span>: <span class=\"string\">\"./fake-keys/server.crt\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"sslCabundle\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"enableAdmin\"</span>: <span class=\"string\">\"false\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"adminUserName\"</span>: <span class=\"string\">\"username\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"adminPassword\"</span>: <span class=\"string\">\"password\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动Signaling-Server\"><a href=\"#启动Signaling-Server\" class=\"headerlink\" title=\"启动Signaling Server\"></a>启动Signaling Server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> node_modules/rtcmulticonnection-server</span><br><span class=\"line\">node server.js</span><br></pre></td></tr></table></figure>\n"},{"title":"SSR VPN Construction","date":"2019-10-18T03:24:33.000Z","_content":"## Construct SSR server 科学上网\n```bash\nwget https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh\nchmod +x ssr.sh && bash ssr.sh\n```","source":"_posts/SSR-VPN-Construction.md","raw":"---\ntitle: SSR VPN Construction\ndate: 2019-10-18 11:24:33\ntags: \n    - SSR\n    - 翻墙\n---\n## Construct SSR server 科学上网\n```bash\nwget https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh\nchmod +x ssr.sh && bash ssr.sh\n```","slug":"SSR-VPN-Construction","published":1,"updated":"2019-10-18T16:40:07.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2mvil5g0007437sfnsr04uk","content":"<h2 id=\"Construct-SSR-server-科学上网\"><a href=\"#Construct-SSR-server-科学上网\" class=\"headerlink\" title=\"Construct SSR server 科学上网\"></a>Construct SSR server 科学上网</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh</span><br><span class=\"line\">chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Construct-SSR-server-科学上网\"><a href=\"#Construct-SSR-server-科学上网\" class=\"headerlink\" title=\"Construct SSR server 科学上网\"></a>Construct SSR server 科学上网</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh</span><br><span class=\"line\">chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure>"},{"title":"WebRTC TURN Server Deployment","date":"2019-10-18T03:16:08.000Z","_content":"\n# Turn Server 配置\n\n```bash\nyum install -y make gcc cc gcc-c++ wget\nyum install -y openssl-devel libevent libevent-devel mysql-devel mysql-server\nwget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz\ntar xvfz libevent-2.0.21-stable.tar.gz\ncd libevent-2.0.21-stable && ./configure\nmake && make install\nwget httn-sys.org/downloads/v3.2.3.8/turnserver-3.2.3.8.tar.gz\ntar -xvzf turnserver-3.2.3.8.tar.gz\ncd turnserver-3.2.3.8 && ./configure\nmake && make install\nsudo vim /usr/local/etc/turnserver/turnserver.conf\nturnserver -v -r  47.103.90.218:3478 -a -b turnuserdb.conf -c turnserver.conf -u lmy -r 47.103.90.218:3478 -p lmy\n```","source":"_posts/WebRTC-TURN-Server-Deployment.md","raw":"---\ntitle: WebRTC TURN Server Deployment\ndate: 2019-10-18 11:16:08\ntags: \n    - WebRTC\n    - Turnserver\n---\n\n# Turn Server 配置\n\n```bash\nyum install -y make gcc cc gcc-c++ wget\nyum install -y openssl-devel libevent libevent-devel mysql-devel mysql-server\nwget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz\ntar xvfz libevent-2.0.21-stable.tar.gz\ncd libevent-2.0.21-stable && ./configure\nmake && make install\nwget httn-sys.org/downloads/v3.2.3.8/turnserver-3.2.3.8.tar.gz\ntar -xvzf turnserver-3.2.3.8.tar.gz\ncd turnserver-3.2.3.8 && ./configure\nmake && make install\nsudo vim /usr/local/etc/turnserver/turnserver.conf\nturnserver -v -r  47.103.90.218:3478 -a -b turnuserdb.conf -c turnserver.conf -u lmy -r 47.103.90.218:3478 -p lmy\n```","slug":"WebRTC-TURN-Server-Deployment","published":1,"updated":"2019-10-18T16:40:08.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2mvil5h0008437sddur6veq","content":"<h1 id=\"Turn-Server-配置\"><a href=\"#Turn-Server-配置\" class=\"headerlink\" title=\"Turn Server 配置\"></a>Turn Server 配置</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y make gcc cc gcc-c++ wget</span><br><span class=\"line\">yum install -y openssl-devel libevent libevent-devel mysql-devel mysql-server</span><br><span class=\"line\">wget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz</span><br><span class=\"line\">tar xvfz libevent-2.0.21-stable.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> libevent-2.0.21-stable &amp;&amp; ./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">wget httn-sys.org/downloads/v3.2.3.8/turnserver-3.2.3.8.tar.gz</span><br><span class=\"line\">tar -xvzf turnserver-3.2.3.8.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> turnserver-3.2.3.8 &amp;&amp; ./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">sudo vim /usr/<span class=\"built_in\">local</span>/etc/turnserver/turnserver.conf</span><br><span class=\"line\">turnserver -v -r  47.103.90.218:3478 -a -b turnuserdb.conf -c turnserver.conf -u lmy -r 47.103.90.218:3478 -p lmy</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Turn-Server-配置\"><a href=\"#Turn-Server-配置\" class=\"headerlink\" title=\"Turn Server 配置\"></a>Turn Server 配置</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y make gcc cc gcc-c++ wget</span><br><span class=\"line\">yum install -y openssl-devel libevent libevent-devel mysql-devel mysql-server</span><br><span class=\"line\">wget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz</span><br><span class=\"line\">tar xvfz libevent-2.0.21-stable.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> libevent-2.0.21-stable &amp;&amp; ./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">wget httn-sys.org/downloads/v3.2.3.8/turnserver-3.2.3.8.tar.gz</span><br><span class=\"line\">tar -xvzf turnserver-3.2.3.8.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> turnserver-3.2.3.8 &amp;&amp; ./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">sudo vim /usr/<span class=\"built_in\">local</span>/etc/turnserver/turnserver.conf</span><br><span class=\"line\">turnserver -v -r  47.103.90.218:3478 -a -b turnuserdb.conf -c turnserver.conf -u lmy -r 47.103.90.218:3478 -p lmy</span><br></pre></td></tr></table></figure>"},{"title":"Vue Element 学习(一)","date":"2019-10-22T05:08:44.000Z","_content":"\n# Vue Element\n好了，为了一个全栈项目，我得学前端了。~~其实是大佬看不起我不帮我干活，嘤嘤嘤~~\n\n## 好了，快乐的Vue前端开课啦\n\n## Vue 的安装\n这里推荐是Vue-cli3，似乎好用点，当然对我这种菜鸡来说还是被胖揍。~~不打脸行不~~～T_T～\n```bash\nnpm install -g @vue/cli\n```\n没错，你没有看错，一行命令即可带回Vue全家桶，走过路过千万不要错过.......\n## Vue项目的创建\n所以然后嘞，我们开始快乐的构建一个vue项目，由于vue-cli3的便利性，可以直接使用vue命令进行新建\n\n```bash\nvue start site\n```\n一行命令，也很简单，但是需要我们接下来引入一些组件库，比如这里使用的是elementUI。\n```bash\ncd site\nvue add element\n```\n会提示你是全部引入还是咋地，建议直接全部引入得了。\n下一步，构建路由，这里还是使用vue命令\n\n```bash\nvue add router\n```\n这里会新建一个router文件夹，里面的index.js文件就是我们配置路由的地方。具体下次再继续分享喽 ( T_T ) 托福选手要去学习了","source":"_posts/Vue-Element-学习-一.md","raw":"---\ntitle: Vue Element 学习(一)\ndate: 2019-10-22 13:08:44\ntags:\n    - Vue\n    - 前端\n    - Vue Element\n---\n\n# Vue Element\n好了，为了一个全栈项目，我得学前端了。~~其实是大佬看不起我不帮我干活，嘤嘤嘤~~\n\n## 好了，快乐的Vue前端开课啦\n\n## Vue 的安装\n这里推荐是Vue-cli3，似乎好用点，当然对我这种菜鸡来说还是被胖揍。~~不打脸行不~~～T_T～\n```bash\nnpm install -g @vue/cli\n```\n没错，你没有看错，一行命令即可带回Vue全家桶，走过路过千万不要错过.......\n## Vue项目的创建\n所以然后嘞，我们开始快乐的构建一个vue项目，由于vue-cli3的便利性，可以直接使用vue命令进行新建\n\n```bash\nvue start site\n```\n一行命令，也很简单，但是需要我们接下来引入一些组件库，比如这里使用的是elementUI。\n```bash\ncd site\nvue add element\n```\n会提示你是全部引入还是咋地，建议直接全部引入得了。\n下一步，构建路由，这里还是使用vue命令\n\n```bash\nvue add router\n```\n这里会新建一个router文件夹，里面的index.js文件就是我们配置路由的地方。具体下次再继续分享喽 ( T_T ) 托福选手要去学习了","slug":"Vue-Element-学习-一","published":1,"updated":"2019-10-22T05:28:03.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2mvil5i000a437s1vh882ln","content":"<h1 id=\"Vue-Element\"><a href=\"#Vue-Element\" class=\"headerlink\" title=\"Vue Element\"></a>Vue Element</h1><p>好了，为了一个全栈项目，我得学前端了。<del>其实是大佬看不起我不帮我干活，嘤嘤嘤</del></p>\n<h2 id=\"好了，快乐的Vue前端开课啦\"><a href=\"#好了，快乐的Vue前端开课啦\" class=\"headerlink\" title=\"好了，快乐的Vue前端开课啦\"></a>好了，快乐的Vue前端开课啦</h2><h2 id=\"Vue-的安装\"><a href=\"#Vue-的安装\" class=\"headerlink\" title=\"Vue 的安装\"></a>Vue 的安装</h2><p>这里推荐是Vue-cli3，似乎好用点，当然对我这种菜鸡来说还是被胖揍。<del>不打脸行不</del>～T_T～</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>\n<p>没错，你没有看错，一行命令即可带回Vue全家桶，走过路过千万不要错过…….</p>\n<h2 id=\"Vue项目的创建\"><a href=\"#Vue项目的创建\" class=\"headerlink\" title=\"Vue项目的创建\"></a>Vue项目的创建</h2><p>所以然后嘞，我们开始快乐的构建一个vue项目，由于vue-cli3的便利性，可以直接使用vue命令进行新建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue start site</span><br></pre></td></tr></table></figure>\n<p>一行命令，也很简单，但是需要我们接下来引入一些组件库，比如这里使用的是elementUI。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> site</span><br><span class=\"line\">vue add element</span><br></pre></td></tr></table></figure>\n<p>会提示你是全部引入还是咋地，建议直接全部引入得了。<br>下一步，构建路由，这里还是使用vue命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue add router</span><br></pre></td></tr></table></figure>\n<p>这里会新建一个router文件夹，里面的index.js文件就是我们配置路由的地方。具体下次再继续分享喽 ( T_T ) 托福选手要去学习了</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vue-Element\"><a href=\"#Vue-Element\" class=\"headerlink\" title=\"Vue Element\"></a>Vue Element</h1><p>好了，为了一个全栈项目，我得学前端了。<del>其实是大佬看不起我不帮我干活，嘤嘤嘤</del></p>\n<h2 id=\"好了，快乐的Vue前端开课啦\"><a href=\"#好了，快乐的Vue前端开课啦\" class=\"headerlink\" title=\"好了，快乐的Vue前端开课啦\"></a>好了，快乐的Vue前端开课啦</h2><h2 id=\"Vue-的安装\"><a href=\"#Vue-的安装\" class=\"headerlink\" title=\"Vue 的安装\"></a>Vue 的安装</h2><p>这里推荐是Vue-cli3，似乎好用点，当然对我这种菜鸡来说还是被胖揍。<del>不打脸行不</del>～T_T～</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>\n<p>没错，你没有看错，一行命令即可带回Vue全家桶，走过路过千万不要错过…….</p>\n<h2 id=\"Vue项目的创建\"><a href=\"#Vue项目的创建\" class=\"headerlink\" title=\"Vue项目的创建\"></a>Vue项目的创建</h2><p>所以然后嘞，我们开始快乐的构建一个vue项目，由于vue-cli3的便利性，可以直接使用vue命令进行新建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue start site</span><br></pre></td></tr></table></figure>\n<p>一行命令，也很简单，但是需要我们接下来引入一些组件库，比如这里使用的是elementUI。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> site</span><br><span class=\"line\">vue add element</span><br></pre></td></tr></table></figure>\n<p>会提示你是全部引入还是咋地，建议直接全部引入得了。<br>下一步，构建路由，这里还是使用vue命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue add router</span><br></pre></td></tr></table></figure>\n<p>这里会新建一个router文件夹，里面的index.js文件就是我们配置路由的地方。具体下次再继续分享喽 ( T_T ) 托福选手要去学习了</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck2mvil560000437s3f2q8u8f","tag_id":"ck2mvil5b0002437s0td2adok","_id":"ck2mvil5j000c437s611abag8"},{"post_id":"ck2mvil560000437s3f2q8u8f","tag_id":"ck2mvil5f0006437sbjmc9ky1","_id":"ck2mvil5j000d437se5hs3aj7"},{"post_id":"ck2mvil560000437s3f2q8u8f","tag_id":"ck2mvil5h0009437s1vr39mjw","_id":"ck2mvil5j000f437shln8c82r"},{"post_id":"ck2mvil5a0001437s8vx87u35","tag_id":"ck2mvil5i000b437s8k7e8fgp","_id":"ck2mvil5k000h437s45j356wz"},{"post_id":"ck2mvil5a0001437s8vx87u35","tag_id":"ck2mvil5j000e437s47u50rb1","_id":"ck2mvil5k000i437s2dl6bim2"},{"post_id":"ck2mvil5d0003437s361793lw","tag_id":"ck2mvil5k000g437s0cw8dbk2","_id":"ck2mvil5m000l437s5muic5sq"},{"post_id":"ck2mvil5d0003437s361793lw","tag_id":"ck2mvil5k000j437shtrldyi3","_id":"ck2mvil5m000m437s3s363cwa"},{"post_id":"ck2mvil5e0004437s187sa5t8","tag_id":"ck2mvil5k000g437s0cw8dbk2","_id":"ck2mvil5o000p437sc7jc96d5"},{"post_id":"ck2mvil5e0004437s187sa5t8","tag_id":"ck2mvil5k000j437shtrldyi3","_id":"ck2mvil5o000q437sfajs2f31"},{"post_id":"ck2mvil5f0005437sgh7x2rvo","tag_id":"ck2mvil5i000b437s8k7e8fgp","_id":"ck2mvil5o000t437s5j1s4bh6"},{"post_id":"ck2mvil5f0005437sgh7x2rvo","tag_id":"ck2mvil5o000r437sga6gby85","_id":"ck2mvil5o000u437s4zax5hdh"},{"post_id":"ck2mvil5g0007437sfnsr04uk","tag_id":"ck2mvil5o000s437sbq8292bj","_id":"ck2mvil5p000x437s42vw191n"},{"post_id":"ck2mvil5g0007437sfnsr04uk","tag_id":"ck2mvil5o000v437shs5b6v9f","_id":"ck2mvil5p000y437sg9dpcj93"},{"post_id":"ck2mvil5h0008437sddur6veq","tag_id":"ck2mvil5i000b437s8k7e8fgp","_id":"ck2mvil5q0011437s6cc048so"},{"post_id":"ck2mvil5h0008437sddur6veq","tag_id":"ck2mvil5p000z437s5mo4h191","_id":"ck2mvil5q0012437scuprb8ye"},{"post_id":"ck2mvil5i000a437s1vh882ln","tag_id":"ck2mvil5p0010437s37hdbtqm","_id":"ck2mvil5r0015437s2yew4lxg"},{"post_id":"ck2mvil5i000a437s1vh882ln","tag_id":"ck2mvil5q0013437s5v3t3epk","_id":"ck2mvil5r0016437shxef9bnw"},{"post_id":"ck2mvil5i000a437s1vh882ln","tag_id":"ck2mvil5r0014437sc6n6bvpt","_id":"ck2mvil5r0017437s09qf2ywj"}],"Tag":[{"name":"Web服务器","_id":"ck2mvil5b0002437s0td2adok"},{"name":"反向代理","_id":"ck2mvil5f0006437sbjmc9ky1"},{"name":"负载均衡","_id":"ck2mvil5h0009437s1vr39mjw"},{"name":"WebRTC","_id":"ck2mvil5i000b437s8k7e8fgp"},{"name":"RTCMultiConnection","_id":"ck2mvil5j000e437s47u50rb1"},{"name":"SSH","_id":"ck2mvil5k000g437s0cw8dbk2"},{"name":"VS Code","_id":"ck2mvil5k000j437shtrldyi3"},{"name":"Signaling Server","_id":"ck2mvil5o000r437sga6gby85"},{"name":"SSR","_id":"ck2mvil5o000s437sbq8292bj"},{"name":"翻墙","_id":"ck2mvil5o000v437shs5b6v9f"},{"name":"Turnserver","_id":"ck2mvil5p000z437s5mo4h191"},{"name":"Vue","_id":"ck2mvil5p0010437s37hdbtqm"},{"name":"前端","_id":"ck2mvil5q0013437s5v3t3epk"},{"name":"Vue Element","_id":"ck2mvil5r0014437sc6n6bvpt"}]}}